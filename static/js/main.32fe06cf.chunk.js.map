{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","getReorderedGoods","goods","sortType","isReversed","visibleGoods","reverse","NONE","ALPHABET","sort","good1","good2","localeCompare","LENGTH","length","Error","App","useState","setReverse","setSortType","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UASF,SAASC,EACPC,EACAC,EACAC,GAEA,IAAMC,EAAY,YAAOH,GAMzB,OAJIE,GACFC,EAAaC,UAGPH,GACN,KAAKJ,EAASQ,KACZ,MAEF,KAAKR,EAASS,SACZH,EAAaI,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,MACxD,MAEF,KAAKZ,EAASc,OACZR,EAAaI,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMI,OAASH,EAAMG,UACzD,MAEF,QAAS,MAAM,IAAIC,MAAM,qBAG3B,OAAOV,G,SAhCJN,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAmCE,IAAMiB,EAAgB,WAC3B,MAAiCC,oBAAS,GAA1C,mBAAOb,EAAP,KAAmBc,EAAnB,KACA,EAAgCD,mBAASlB,EAASQ,MAAlD,mBAAOJ,EAAP,KAAiBgB,EAAjB,KAEA,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,SAAU,UAAW,CACzC,WAAYnB,IAAaJ,EAASS,WAEpCe,QAAS,kBAAMJ,EAAYpB,EAASS,WALtC,iCAUA,wBACEa,KAAK,SACLD,UAAWE,IAAW,SAAU,UAAW,CACzC,WAAYnB,IAAaJ,EAASc,SAEpCU,QAAS,kBAAMJ,EAAYpB,EAASc,SALtC,4BAUA,wBACEQ,KAAK,SACLD,UAAWE,IAAW,SAAU,aAAc,CAC5C,YAAalB,IAEfmB,QAAS,kBAAML,GAAYd,IAL7B,sBAWGD,IAAaJ,EAASQ,MAAQH,IAE3B,wBACEiB,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPJ,EAAYpB,EAASQ,MAAOW,GAAW,IAJ3C,sBAaR,6BACGjB,EAAkBD,EAAiBG,EAAUC,GAAYoB,KAAI,SAAAC,GAAI,OAChE,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YC1GjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.32fe06cf.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nfunction getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n) {\n  const visibleGoods = [...goods];\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  switch (sortType) {\n    case SortType.NONE:\n      break;\n\n    case SortType.ALPHABET:\n      visibleGoods.sort((good1, good2) => good1.localeCompare(good2));\n      break;\n\n    case SortType.LENGTH:\n      visibleGoods.sort((good1, good2) => good1.length - good2.length);\n      break;\n\n    default: throw new Error('Unknown sort type');\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setReverse] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-info', {\n            'is-light': sortType !== SortType.ALPHABET,\n          })}\n          onClick={() => setSortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-info', {\n            'is-light': sortType !== SortType.LENGTH,\n          })}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={() => setReverse(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {\n          (sortType !== SortType.NONE || isReversed)\n            && (\n              <button\n                type=\"button\"\n                className=\"button is-danger is-light\"\n                onClick={() => {\n                  setSortType(SortType.NONE); setReverse(false);\n                }}\n              >\n                Reset\n              </button>\n            )\n        }\n      </div>\n\n      <ul>\n        {getReorderedGoods(goodsFromServer, sortType, isReversed).map(good => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}